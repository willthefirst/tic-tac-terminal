#!/usr/bin/env node

const chalk = require("chalk");
const readline = require("readline");
const args = process.argv;

const gameState = {
    currentPlayer: "X",
    board: [
        ["_", "_", "_"],
        ["_", "_", "_"],
        ["_", "_", "_"],
    ],
};

// Set up readline
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    prompt: "",
});

/**
* Prints usage instructions.
*/
const printUsage = function () {
    const instructions = `
    Tic Tac Toe (by Will Moritz)
    
    usage: 
    
    tic-tac-toe <command>
    
    commands can be:
    start:    start a new game
    help:     show instructions
    `;
    
    console.log(instructions);
};

/**
* Prints out the current board state
*/
function showBoard() {
    let result = ``;
    
    for (let i = 0; i < gameState.board.length; i++) {
        const row = gameState.board[i];
        let rowString = `   `;
        for (let j = 0; j < row.length; j++) {
            const cell = row[j];
            rowString = rowString + cell + " ";
        }
        result = result + rowString + "\n";
    }
    
    console.log(chalk.green(result));
}

/**
* Starts a new game
*/
const start = function () {
    promptMove();
    
    // Every turn
    
    // Print out board state
    // Prompt player for X coordinate
    // Prompt player for Y coordinate
    // Check to see if there is a three in a row condition.
};

function noWinner() {
    // 0,0, 1,0, 2,0
    // 0,1, 1,1, 2,1
    // 0,2, 1,2, 2,2
    
    const board = gameState.board;

    // Check horizontal
    for (let i = 0; i < board.length; i++) {
        const row = board[i];

        if (row.every(isCurrentPlayer)) {
            return false;
        }
    }

    console.log("No win from horizontals.")

    // Check vertical
    for (let y = 0; y < board.length; y++) {
        const row = board[y];
        const testArray = [];

        for (let x = 0; x < row.length; x++) {
            testArray.push(board[x][y]);
        }
        testArray.push(board[0][0]);
        testArray.push(board[0][1]);
        testArray.push(board[0][2]);
    }

    console.log("No win from verticals.")

    // Check diagonals
    const diagonals = [
      [
        board[0][0],
        board[1][1],
        board[2][2],
      ],
      [
        board[0][2],
        board[1][1],
        board[2][0],
      ],
    ];

    for (let i = 0; i < diagonals.length; i++) {
        const coordinates = diagonals[i];
        if (diagonals[i].every(isCurrentPlayer)) {
            return false;
        }
    }

    console.log("No win from diagonals.")

    return true;
}

function isCurrentPlayer(cell) {
    return cell === gameState.currentPlayer;
}

const promptMove = function () {
    // Switch player
    if (gameState.currentPlayer === "X") {
        gameState.currentPlayer = "O";
    } else {
        gameState.currentPlayer = "X";
    }
    
    showBoard();
    
    console.log(`${gameState.currentPlayer}'s turn:\n`);
    rl.question("Enter X coordinate for your move: ", (x) => {
        rl.question("Enter Y coordinate for your move: ", (y) => {
            gameState.board[y][x] = gameState.currentPlayer;
            if (noWinner()) {
                console.log("");
                promptMove();
            } else {
                declareWinner();
            }
        });
    });
};

function declareWinner() {
    console.log(`${gameState.currentPlayer} has won! Game over.`);
}

/**
* Initializes interactive console.
*/
const init = function () {
    const commands = {
        start: start,
        help: printUsage,
    };
    
    printUsage();
    start();
    
    // // Listen for user input
    // rl.on("line", (input) => {
    //     input = input.toLowerCase();
    //     if (input in commands) {
    //         commands[input]();
    //     } else {
    //         console.log(`Invalid argument: ${input}`);
    //     }
    // });
};

init();
