#!/usr/bin/env node

const readline = require("readline");
const chalk = require("chalk");

const gameState = {
  currentPlayer: chalk.red("X"),
  board: [
    ["_", "_", "_"],
    ["_", "_", "_"],
    ["_", "_", "_"],
  ],
  turnNumber: 1,
};

/**
 * Prints usage instructions.
 */
function printWelcome() {
  const instructions = `
Let's play Tic Tac Toe!

First, select your opponent:
1 - Play against another human
2 - Play against the computer

Enter 1 or 2: `;

  rl.question(instructions, (answer) => {
    switch (answer) {
      case "1":
        startGameWithHuman();
        break;
      case "2":
        startGameWithAI();
        break;
      default:
        console.error(chalk.red("Invalid response. Please enter 1 or 2."));
        rl.close();
        break;
    }
  });
}

/**
 * Prints current board state
 */
function showBoard() {
  let result = ``;

  for (let i = 0; i < gameState.board.length; i++) {
    const row = gameState.board[i];
    let rowString = `   `;
    for (let j = 0; j < row.length; j++) {
      const cell = row[j];
      rowString = rowString + cell + " ";
    }
    result = result + rowString + "\n";
  }

  console.log(chalk.gray(result));
}

/**
 * Starts a new game with another human
 */

function startGameWithHuman() {
  console.log("\nGet your fingers ready!\n");
  promptMove();
}

/**
 * Starts a new game with the computer
 */
function startGameWithAI() {
  console.log("Let's figure out how to make an AI.");
}

/**
 * Prompts user for coordinates and saves to gameState
 */
const promptMove = function () {
  console.log(`---------------------------------`);
  console.log(`Turn ${gameState.turnNumber} ~ ${gameState.currentPlayer}'s move:\n`);
  showBoard();
  rl.question("Enter X coordinate: ", (x) => {
    rl.question("Enter Y coordinate: ", (y) => {
      console.log("");
      if (!coordinatesAreValid(x, y)) {
        promptMove();
        return;
      }
      gameState.board[y][x] = gameState.currentPlayer;

      if (noWinner(x, y)) {
        nextTurn();
        promptMove();
      } else {
        declareWinner();
      }
    });
  });
};

/**
 * Returns false if coordinates are invalid or already occupied
 * @param {number} x - Attempted move's X coordinate
 * @param {number} y - Attempted move's Y coordinate
 */
function coordinatesAreValid(x, y) {
  x = parseInt(x);
  y = parseInt(y);
  
  if (isNaN(x) || isNaN(y) || x < 0 || x > 2 || y < 0 || y > 2) {
    console.error(chalk.red("Coordinates are invalid.\n"));
    return false;
  } else if (gameState.board[y][x] !== "_") {
    console.error(chalk.red("You may not play that position. Try again.\n"));
    return false;
  } else {
    return true;
  }
}

/**
 * Checks board for three in a row.
 * Looks at the row and column of the current move, then both diagonals.
 * @param  {number} xCoord
 * @param  {number} yCoord
 */
function noWinner(xCoord, yCoord) {
  const board = gameState.board;

  // Check current row
  if (board[yCoord].every(isCurrentPlayer)) {
    return false;
  }

  // Check current column
  const currColumn = [];

  for (let i = 0; i < board.length; i++) {
    currColumn.push(board[i][xCoord]);
  }

  if (currColumn.every(isCurrentPlayer)) {
    return false;
  }

  // Check diagonals
  const diagonals = [
    [board[0][0], board[1][1], board[2][2]],
    [board[0][2], board[1][1], board[2][0]],
  ];

  for (let i = 0; i < diagonals.length; i++) {
    if (diagonals[i].every(isCurrentPlayer)) {
      return false;
    }
  }

  return true;
}

/**
 * @param  {string} cell - Checks whether a cell corresponds to the current player.
 */
function isCurrentPlayer(cell) {
  return cell === gameState.currentPlayer;
}

/**
 * Switches players
 */
function nextTurn() {
  if (gameState.currentPlayer === chalk.red("X")) {
    gameState.currentPlayer = chalk.blue("O");
  } else {
    gameState.currentPlayer = chalk.red("X");
  }

  gameState.turnNumber++;
}

/**
 * Prints out winner and closes game connection
 */
function declareWinner() {
  console.log(`---------------------------------`);
  showBoard();
  console.log(chalk.green(`Game over! ${gameState.currentPlayer} has won.\n`));
  rl.close();
}

// Set up readline
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  prompt: "",
});

printWelcome();
